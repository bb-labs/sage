// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Gender: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case man // = 0
  case woman // = 1
  case human // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .man
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .man
    case 1: self = .woman
    case 2: self = .human
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .man: return 0
    case .woman: return 1
    case .human: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Gender: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gender] = [
    .man,
    .woman,
    .human,
  ]
}

#endif  // swift(>=4.2)

enum Proximity: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case neighborhood // = 0
  case city // = 1
  case metro // = 2
  case state // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .neighborhood
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .neighborhood
    case 1: self = .city
    case 2: self = .metro
    case 3: self = .state
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .neighborhood: return 0
    case .city: return 1
    case .metro: return 2
    case .state: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proximity: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proximity] = [
    .neighborhood,
    .city,
    .metro,
    .state,
  ]
}

#endif  // swift(>=4.2)

enum MeetingTime: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case morning // = 0
  case earlyAfternoon // = 1
  case lateAfternoon // = 2
  case evening // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .morning
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .morning
    case 1: self = .earlyAfternoon
    case 2: self = .lateAfternoon
    case 3: self = .evening
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .morning: return 0
    case .earlyAfternoon: return 1
    case .lateAfternoon: return 2
    case .evening: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MeetingTime: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [MeetingTime] = [
    .morning,
    .earlyAfternoon,
    .lateAfternoon,
    .evening,
  ]
}

#endif  // swift(>=4.2)

struct User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: User.Token {
    get {return _token ?? User.Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {self._token = nil}

  var name: String = String()

  var email: String = String()

  var rating: Double = 0

  var gender: Gender = .man

  var birthday: Int32 = 0

  var videoURL: String = String()

  var location: Location {
    get {return _location ?? Location()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {self._location = nil}

  var preferences: Preferences {
    get {return _preferences ?? Preferences()}
    set {_preferences = newValue}
  }
  /// Returns true if `preferences` has been explicitly set.
  var hasPreferences: Bool {return self._preferences != nil}
  /// Clears the value of `preferences`. Subsequent reads from it will return its default value.
  mutating func clearPreferences() {self._preferences = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Token {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: String = String()

    var authCode: String = String()

    var identityToken: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _token: User.Token? = nil
  fileprivate var _location: Location? = nil
  fileprivate var _preferences: Preferences? = nil
}

struct Place {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var location: Location {
    get {return _location ?? Location()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {self._location = nil}

  var description_p: String = String()

  var tags: [String] = []

  var openHours: [Int32] = []

  var closeHours: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _location: Location? = nil
}

struct Location {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String = String()

  var latitude: Int32 = 0

  var longitude: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Preferences {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ageMin: Int32 = 0

  var ageMax: Int32 = 0

  var gender: Gender = .man

  var proximity: Proximity = .neighborhood

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Date {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var otherUser: User {
    get {return _storage._otherUser ?? User()}
    set {_uniqueStorage()._otherUser = newValue}
  }
  /// Returns true if `otherUser` has been explicitly set.
  var hasOtherUser: Bool {return _storage._otherUser != nil}
  /// Clears the value of `otherUser`. Subsequent reads from it will return its default value.
  mutating func clearOtherUser() {_uniqueStorage()._otherUser = nil}

  var time: Int32 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  var place: Place {
    get {return _storage._place ?? Place()}
    set {_uniqueStorage()._place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
  var hasPlace: Bool {return _storage._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {_uniqueStorage()._place = nil}

  var createdAt: Int32 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Gender: @unchecked Sendable {}
extension Proximity: @unchecked Sendable {}
extension MeetingTime: @unchecked Sendable {}
extension User: @unchecked Sendable {}
extension User.Token: @unchecked Sendable {}
extension Place: @unchecked Sendable {}
extension Location: @unchecked Sendable {}
extension Preferences: @unchecked Sendable {}
extension Date: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Gender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAN"),
    1: .same(proto: "WOMAN"),
    2: .same(proto: "HUMAN"),
  ]
}

extension Proximity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NEIGHBORHOOD"),
    1: .same(proto: "CITY"),
    2: .same(proto: "METRO"),
    3: .same(proto: "STATE"),
  ]
}

extension MeetingTime: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MORNING"),
    1: .same(proto: "EARLY_AFTERNOON"),
    2: .same(proto: "LATE_AFTERNOON"),
    3: .same(proto: "EVENING"),
  ]
}

extension User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "name"),
    3: .same(proto: "email"),
    4: .same(proto: "rating"),
    5: .same(proto: "gender"),
    6: .same(proto: "birthday"),
    7: .standard(proto: "video_url"),
    8: .same(proto: "location"),
    9: .same(proto: "preferences"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.rating) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.gender) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.birthday) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.videoURL) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._preferences) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if self.rating != 0 {
      try visitor.visitSingularDoubleField(value: self.rating, fieldNumber: 4)
    }
    if self.gender != .man {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 5)
    }
    if self.birthday != 0 {
      try visitor.visitSingularInt32Field(value: self.birthday, fieldNumber: 6)
    }
    if !self.videoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.videoURL, fieldNumber: 7)
    }
    try { if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._preferences {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User, rhs: User) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.name != rhs.name {return false}
    if lhs.email != rhs.email {return false}
    if lhs.rating != rhs.rating {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.birthday != rhs.birthday {return false}
    if lhs.videoURL != rhs.videoURL {return false}
    if lhs._location != rhs._location {return false}
    if lhs._preferences != rhs._preferences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "auth_code"),
    3: .standard(proto: "identity_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.authCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.identityToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.authCode.isEmpty {
      try visitor.visitSingularStringField(value: self.authCode, fieldNumber: 2)
    }
    if !self.identityToken.isEmpty {
      try visitor.visitSingularStringField(value: self.identityToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.Token, rhs: User.Token) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.authCode != rhs.authCode {return false}
    if lhs.identityToken != rhs.identityToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Place: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Place"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "location"),
    3: .same(proto: "description"),
    4: .same(proto: "tags"),
    5: .standard(proto: "open_hours"),
    6: .standard(proto: "close_hours"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 5: try { try decoder.decodeRepeatedInt32Field(value: &self.openHours) }()
      case 6: try { try decoder.decodeRepeatedInt32Field(value: &self.closeHours) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 4)
    }
    if !self.openHours.isEmpty {
      try visitor.visitPackedInt32Field(value: self.openHours, fieldNumber: 5)
    }
    if !self.closeHours.isEmpty {
      try visitor.visitPackedInt32Field(value: self.closeHours, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Place, rhs: Place) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._location != rhs._location {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.openHours != rhs.openHours {return false}
    if lhs.closeHours != rhs.closeHours {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Location"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.latitude) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularInt32Field(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularInt32Field(value: self.longitude, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Location, rhs: Location) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Preferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Preferences"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "age_min"),
    2: .standard(proto: "age_max"),
    3: .same(proto: "gender"),
    4: .same(proto: "proximity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ageMin) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.ageMax) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.gender) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.proximity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ageMin != 0 {
      try visitor.visitSingularInt32Field(value: self.ageMin, fieldNumber: 1)
    }
    if self.ageMax != 0 {
      try visitor.visitSingularInt32Field(value: self.ageMax, fieldNumber: 2)
    }
    if self.gender != .man {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 3)
    }
    if self.proximity != .neighborhood {
      try visitor.visitSingularEnumField(value: self.proximity, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Preferences, rhs: Preferences) -> Bool {
    if lhs.ageMin != rhs.ageMin {return false}
    if lhs.ageMax != rhs.ageMax {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.proximity != rhs.proximity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Date: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Date"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .standard(proto: "other_user"),
    3: .same(proto: "time"),
    4: .same(proto: "place"),
    5: .standard(proto: "created_at"),
  ]

  fileprivate class _StorageClass {
    var _user: User? = nil
    var _otherUser: User? = nil
    var _time: Int32 = 0
    var _place: Place? = nil
    var _createdAt: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _otherUser = source._otherUser
      _time = source._time
      _place = source._place
      _createdAt = source._createdAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._otherUser) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._time) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._place) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._createdAt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._otherUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._time != 0 {
        try visitor.visitSingularInt32Field(value: _storage._time, fieldNumber: 3)
      }
      try { if let v = _storage._place {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._createdAt, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Date, rhs: Date) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._user != rhs_storage._user {return false}
        if _storage._otherUser != rhs_storage._otherUser {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._place != rhs_storage._place {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
