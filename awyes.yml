aws.iam.create_role:
  RoleName: ${AWS_ROLE_NAME}
  Description: Role for sage aws app
  AssumeRolePolicyDocument: >
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": { 
            "Service": [
              "ec2.amazonaws.com",
              "eks.amazonaws.com",
              "route53.amazonaws.com",
              "rds.amazonaws.com",
              "ssm.amazonaws.com"
            ]
          },
          "Action": "sts:AssumeRole"
        }
      ]
    }
---
repo.user.tag:
---
app.user.save_ios_protos:
  files:
    - sage.pb.swift
    - sage.grpc.swift
app.user.apple_client_secret:
app.image.build:
  tag: ${DOCKER_REGISTRY}/${APP_NAME}:$(repo.user.tag)
  path: app
  dockerfile: Dockerfile
app.image.push:
  repository: ${DOCKER_REGISTRY}/${APP_NAME}
  tag: $(repo.user.tag)
  auth_config:
    username: ${DOCKER_HUB_USERNAME}
    password: ${DOCKER_HUB_PASSWORD}
---
wss.image.build:
  tag: ${DOCKER_REGISTRY}/${WSS_NAME}:$(repo.user.tag)
  path: wss
  dockerfile: Dockerfile
wss.image.push:
  repository: ${DOCKER_REGISTRY}/${WSS_NAME}
  tag: $(repo.user.tag)
  auth_config:
    username: ${DOCKER_HUB_USERNAME}
    password: ${DOCKER_HUB_PASSWORD}
---
db.iam.attach_role_policy.rds:
  RoleName: ${AWS_ROLE_NAME}
  PolicyArn: arn:aws:iam::aws:policy/AmazonRDSFullAccess
db.rds.create_db_parameter_group:
  DBParameterGroupName: ${DB_PARAMETER_GROUP_NAME}
  DBParameterGroupFamily: ${DB_PARAMETER_GROUP_FAMILY}
  Description: Sage parameter group
db.rds.modify_db_parameter_group:
  DBParameterGroupName: ${DB_PARAMETER_GROUP_NAME}
  Parameters:
    - ParameterName: rds.force_ssl
      ParameterValue: "0"
      ApplyMethod: immediate
db.rds.describe_db_parameter_groups:
  DBParameterGroupName: ${DB_PARAMETER_GROUP_NAME}
db.ec2.create_security_group:
  GroupName: ${DB_SECURITY_GROUP_NAME}
  Description: Sage db security group
db.ec2.authorize_security_group_ingress:
  GroupName: ${DB_SECURITY_GROUP_NAME}
  IpPermissions:
    - FromPort: ${DB_PORT}
      ToPort: ${DB_PORT}
      IpProtocol: tcp
      IpRanges:
        - CidrIp: "0.0.0.0/0"
db.ec2.describe_security_groups:
  GroupNames:
    - ${DB_SECURITY_GROUP_NAME}
db.rds.create_db_instance:
  AllocatedStorage: 20
  DBInstanceClass: ${DB_INSTANCE_CLASS}
  DBName: ${POSTGRES_DB}
  DBInstanceIdentifier: ${APP_NAME}-${DB_NAME}
  DBParameterGroupName: ${DB_PARAMETER_GROUP_NAME}
  VpcSecurityGroupIds:
    - $(db.ec2.describe_security_groups.SecurityGroups.0.GroupId)
  Engine: ${DB_ENGINE}
  MasterUsername: ${POSTGRES_USER}
  MasterUserPassword: ${POSTGRES_PASSWORD}
---
turn.iam.get_role:
  RoleName: ${AWS_ROLE_NAME}
turn.iam.create_instance_profile:
  InstanceProfileName: ${TURN_INSTANCE_PROFILE_NAME}
turn.iam.add_role_to_instance_profile:
  InstanceProfileName: ${TURN_INSTANCE_PROFILE_NAME}
  RoleName: ${AWS_ROLE_NAME}
turn.iam.attach_role_policy.ssm:
  RoleName: ${AWS_ROLE_NAME}
  PolicyArn: arn:aws:iam::aws:policy/AmazonSSMFullAccess
turn.ec2.create_security_group:
  GroupName: ${TURN_SECURITY_GROUP_NAME}
  Description: Sage turn server security group
turn.ec2.authorize_security_group_ingress:
  GroupName: ${TURN_SECURITY_GROUP_NAME}
  IpPermissions:
    - FromPort: 3478
      ToPort: 3478
      IpProtocol: udp
      IpRanges:
        - CidrIp: "0.0.0.0/0"
    - FromPort: 3478
      ToPort: 3478
      IpProtocol: tcp
      IpRanges:
        - CidrIp: "0.0.0.0/0"
    - FromPort: 49152
      ToPort: 65535
      IpProtocol: udp
      IpRanges:
        - CidrIp: "0.0.0.0/0"
turn.ec2r.create_instances:
  ImageId: ${TURN_AMI_ID}
  InstanceType: ${TURN_INSTANCE_TYPE}
  MaxCount: 1
  MinCount: 1
  IamInstanceProfile:
    Name: ${TURN_INSTANCE_PROFILE_NAME}
  SecurityGroups:
    - ${TURN_SECURITY_GROUP_NAME}
turn.ec2_waiter.wait:
  InstanceIds:
    - $(turn.ec2r.create_instances.0.id)
turn.ec2.describe_instances:
  InstanceIds:
    - $(turn.ec2r.create_instances.0.id)
turn.ec2.allocate_address:
  Domain: vpc
turn.ec2.associate_address:
  InstanceId: $(turn.ec2r.create_instances.0.id)
  AllocationId: $(turn.ec2.allocate_address.AllocationId)
turn.ssm.send_command:
  DocumentName: AWS-RunShellScript
  InstanceIds:
    - $(turn.ec2r.create_instances.0.id)
  Parameters:
    commands:
      - "sudo apt-get update"
      - "sudo apt-get -y upgrade"
      - "sudo apt-get -y install coturn"
      - "echo 'TURNSERVER_ENABLED=1' | sudo tee /etc/default/coturn"
      - "echo 'external-ip=$(turn.ec2.allocate_address.PublicIp)' | sudo tee /etc/turnserver.conf"
      - "echo 'realm=${TURN_DOMAIN}' | sudo tee -a /etc/turnserver.conf"
      - "echo 'user=test:test123' | sudo tee -a /etc/turnserver.conf"
      - "echo 'lt-cred-mech' | sudo tee -a /etc/turnserver.conf"
      - "sudo systemctl start coturn"
turn.ssm_waiter.wait:
  CommandId: $(turn.ssm.send_command.Command.CommandId)
  InstanceId: $(turn.ec2r.create_instances.0.id)
  WaiterConfig:
    Delay: 15
    MaxAttempts: 10
turn.ssm.get_command_invocation:
  CommandId: $(turn.ssm.send_command.Command.CommandId)
  InstanceId: $(turn.ec2r.create_instances.0.id)
