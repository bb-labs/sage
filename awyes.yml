# # -------------------------------------------------------------------
# # user
# # -------------------------------------------------------------------
user:
  get_user:
    client: iam
    workflow:
      - init
  get_caller_identity:
    client: sts
    workflow:
      - init

# # -------------------------------------------------------------------
# # images
# # -------------------------------------------------------------------

image:
  build:
    client: docker.images
    workflow:
      - init
    args:
      tag: trumanpurnell/sage
      path: ./back/app
      dockerfile: Dockerfile
  push:
    client: docker.images
    workflow:
      - init
    depends_on:
      - image.build
    args:
      repository: trumanpurnell/sage
      tag: app
      auth_config:
        username: trumanpurnell
        password: Smores44!

# # -------------------------------------------------------------------
# # roles
# # -------------------------------------------------------------------

node_role:
  get_role:
    client: iam
    depends_on:
      - node_role.create_role
      - node_role_policy_cni.attach_role_policy
      - node_role_policy_worker.attach_role_policy
      - node_role_policy_container.attach_role_policy
    workflow:
      - init
    args:
      RoleName: sage-node
  create_role:
    client: iam
    workflow:
      - init
    args:
      RoleName: sage-node
      Description: Role for sage kubernetes node
      AssumeRolePolicyDocument: >
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { 
              "Service": [
                "ec2.amazonaws.com"
              ] 
            },
            "Action": "sts:AssumeRole"
          }]
        }

node_role_policy_worker:
  attach_role_policy:
    client: iam
    workflow:
      - init
    depends_on:
      - node_role.create_role
    args:
      RoleName: sage-node
      PolicyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy

node_role_policy_container:
  attach_role_policy:
    client: iam
    workflow:
      - init
    depends_on:
      - node_role.create_role
    args:
      RoleName: sage-node
      PolicyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

node_role_policy_cni:
  attach_role_policy:
    client: iam
    workflow:
      - init
    depends_on:
      - node_role.create_role
    args:
      RoleName: sage-node
      PolicyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

cluster_role:
  get_role:
    client: iam
    depends_on:
      - cluster_role.create_role
      - cluster_role.attach_role_policy
    workflow:
      - init
    args:
      RoleName: sage-cluster
  create_role:
    client: iam
    workflow:
      - init
    args:
      RoleName: sage-cluster
      Description: Role for sage kubernetes cluster
      AssumeRolePolicyDocument: >
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { 
              "Service": [
                "lambda.amazonaws.com", 
                "rds.amazonaws.com",
                "eks.amazonaws.com"
              ] 
            },
            "Action": "sts:AssumeRole"
          }]
        }
  attach_role_policy:
    client: iam
    workflow:
      - init
    depends_on:
      - cluster_role.create_role
    args:
      RoleName: sage-cluster
      PolicyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

# # -------------------------------------------------------------------
# # kubernetes
# # -------------------------------------------------------------------

kube:
  update_auth:
    client: user
    depends_on:
      - user.get_caller_identity
      - kube.update_config
    workflow:
      - init
    args:
      - $(user.get_caller_identity.Account)
  update_config:
    client: user
    depends_on:
      - kube.describe_cluster
    workflow:
      - init
    args:
      - $(kube.describe_cluster.cluster.name)
  install_chart:
    client: user
    depends_on:
      - kube.describe_cluster
    workflow:
      - release
    args:
      - $(kube.describe_cluster.cluster.name)
  upgrade_chart:
    client: user
    depends_on:
      - kube.describe_cluster
    workflow:
      - upgrade
    args:
      - $(kube.describe_cluster.cluster.name)
  describe_cluster:
    client: eks
    workflow:
      - init
    depends_on:
      - kube.create_nodegroup
    args:
      name: sage
  describe_vpcs:
    client: ec2
    workflow:
      - init
  describe_security_groups:
    client: ec2
    workflow:
      - init
    args:
      GroupNames:
        - default
  describe_subnets:
    client: ec2
    workflow:
      - init
    depends_on:
      - kube.describe_vpcs
    args:
      Filters:
        - Name: vpc-id
          Values:
            - $(kube.describe_vpcs.Vpcs.0.VpcId)
  create_nodegroup:
    client: eks
    workflow:
      - init
    depends_on:
      - kube.create_cluster
      - node_role.get_role
    args:
      clusterName: sage
      nodegroupName: sage-node-group
      nodeRole: $(node_role.get_role.Role.Arn)
      subnets:
        - $(kube.describe_subnets.Subnets.0.SubnetId)
        - $(kube.describe_subnets.Subnets.1.SubnetId)
        - $(kube.describe_subnets.Subnets.2.SubnetId)
        - $(kube.describe_subnets.Subnets.3.SubnetId)
  create_cluster:
    client: eks
    workflow:
      - init
    depends_on:
      - cluster_role.get_role
      - kube.describe_subnets
      - kube.describe_security_groups
    args:
      name: sage
      version: "1.28"
      roleArn: $(cluster_role.get_role.Role.Arn)
      resourcesVpcConfig:
        securityGroupIds:
          - $(kube.describe_security_groups.SecurityGroups.0.GroupId)
        subnetIds:
          - $(kube.describe_subnets.Subnets.0.SubnetId)
          - $(kube.describe_subnets.Subnets.1.SubnetId)
          - $(kube.describe_subnets.Subnets.2.SubnetId)
          - $(kube.describe_subnets.Subnets.3.SubnetId)
        endpointPublicAccess: true
