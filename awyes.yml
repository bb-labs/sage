- aws_user:
    - iam.get_user:
    - iam.get_caller_identity:

- image:
    - docker.build:
        tag: ${DOCKER_REGISTRY}/${APP_REPO}
        path: go
        dockerfile: Dockerfile
    - docker.push:
        repository: ${DOCKER_REGISTRY}/${APP_REPO}
        tag: ${APP_IMAGE_TAG}
        auth_config:
          username: ${DOCKER_HUB_USERNAME}
          password: ${DOCKER_HUB_PASSWORD}

- node_role:
    - iam.create_role:
        RoleName: ${AWS_SAGE_NODE_ROLE_NAME}
        Description: Role for sage kubernetes node
        AssumeRolePolicyDocument: >
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": { 
                "Service": [
                  "ec2.amazonaws.com"
                ] 
              },
              "Action": "sts:AssumeRole"
            }]
          }
    - iam.get_role:
        RoleName: ${AWS_SAGE_NODE_ROLE_NAME}
    - iam.attach_role_policy:
        RoleName: ${AWS_SAGE_NODE_ROLE_NAME}
        PolicyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
    - iam.attach_role_policy:
        RoleName: ${AWS_SAGE_NODE_ROLE_NAME}
        PolicyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    - iam.attach_role_policy:
        RoleName: ${AWS_SAGE_NODE_ROLE_NAME}
        PolicyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

- cluster_role:
    - iam.create_role:
        RoleName: ${AWS_SAGE_NODE_CLUSTER_NAME}
        Description: Role for sage kubernetes cluster
        AssumeRolePolicyDocument: >
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": { 
                "Service": [
                  "lambda.amazonaws.com", 
                  "rds.amazonaws.com",
                  "eks.amazonaws.com"
                ] 
              },
              "Action": "sts:AssumeRole"
            }]
          }
    - iam.get_role:
        RoleName: ${AWS_SAGE_NODE_CLUSTER_NAME}
    - iam.attach_role_policy:
        RoleName: ${AWS_SAGE_NODE_CLUSTER_NAME}
        PolicyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

- kube:
    - ec2.describe_vpcs:
    - ec2.describe_subnets:
        Filters:
          - Name: vpc-id
            Values:
              - $(kube.describe_vpcs.Vpcs.0.VpcId)
    - ec2.describe_security_groups:
        GroupNames:
          - default
    - eks.create_cluster:
        name: ${AWS_SAGE_CLUSTER_NAME}
        version: ${AWS_EKS_VERSION}
        roleArn: $(cluster_role.iam.get_role.Role.Arn)
        resourcesVpcConfig:
          securityGroupIds:
            - $(kube.describe_security_groups.SecurityGroups.0.GroupId)
          subnetIds:
            - $(kube.describe_subnets.Subnets.0.SubnetId)
            - $(kube.describe_subnets.Subnets.1.SubnetId)
            - $(kube.describe_subnets.Subnets.2.SubnetId)
            - $(kube.describe_subnets.Subnets.3.SubnetId)
          endpointPublicAccess: true
    - eks.create_nodegroup:
        clusterName: sage
        nodegroupName: ${AWS_SAGE_NODE_ROLE_NAME}-group
        nodeRole: $(node_role.get_role.Role.Arn)
        subnets:
          - $(kube.describe_subnets.Subnets.0.SubnetId)
          - $(kube.describe_subnets.Subnets.1.SubnetId)
          - $(kube.describe_subnets.Subnets.2.SubnetId)
          - $(kube.describe_subnets.Subnets.3.SubnetId)
    - kube_deploy:
        action: ${AWS_KUBE_ACTION}
        account_id: ${AWS_ACCOUNT_ID}
        cluster_name: ${AWS_SAGE_CLUSTER_NAME}
