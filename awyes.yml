docker.image.build:
  tag: ${DOCKER_REGISTRY}/${APP_REPO}:${APP_IMAGE_TAG}
  path: go
  dockerfile: Dockerfile
docker.image.push:
  repository: ${DOCKER_REGISTRY}/${APP_REPO}
  tag: ${APP_IMAGE_TAG}
  auth_config:
    username: ${DOCKER_HUB_USERNAME}
    password: ${DOCKER_HUB_PASSWORD}

kube.iam.create_role:
  RoleName: ${EKS_ROLE_NAME}
  Description: Role for sage kubernetes node
  AssumeRolePolicyDocument: >
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": { 
            "Service": [
              "ec2.amazonaws.com",
              "eks.amazonaws.com",
              "route53.amazonaws.com"
            ]
          },
          "Action": "sts:AssumeRole"
        }
      ]
    }
kube.iam.create_policy.dns:
  PolicyName: ${EKS_DNS_POLICY_NAME}
  PolicyDocument: >
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "route53:*",
          "Resource": "*"
        }
      ]
    }
kube.iam.get_role:
  RoleName: ${EKS_ROLE_NAME}
kube.iam.attach_role_policy.dns:
  RoleName: ${EKS_ROLE_NAME}
  PolicyArn: arn:aws:iam::${AWS_ACCOUNT_ID}:policy/${EKS_DNS_POLICY_NAME}
kube.iam.attach_role_policy.eks_cluster:
  RoleName: ${EKS_ROLE_NAME}
  PolicyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
kube.iam.attach_role_policy.eks_worker:
  RoleName: ${EKS_ROLE_NAME}
  PolicyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
kube.iam.attach_role_policy.ec2:
  RoleName: ${EKS_ROLE_NAME}
  PolicyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
kube.iam.attach_role_policy.cni:
  RoleName: ${EKS_ROLE_NAME}
  PolicyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

kube.ec2.describe_vpcs:
kube.ec2.describe_subnets:
  Filters:
    - Name: vpc-id
      Values:
        - $(kube.ec2.describe_vpcs.Vpcs.0.VpcId)
kube.ec2.describe_security_groups:
  GroupNames:
    - default
kube.eks.create_cluster:
  name: ${EKS_CLUSTER_NAME}
  version: "${EKS_VERSION}"
  roleArn: $(kube.iam.get_role.Role.Arn)
  resourcesVpcConfig:
    securityGroupIds:
      - $(kube.ec2.describe_security_groups.SecurityGroups.0.GroupId)
    subnetIds:
      - $(kube.ec2.describe_subnets.Subnets.0.SubnetId)
      - $(kube.ec2.describe_subnets.Subnets.1.SubnetId)
      - $(kube.ec2.describe_subnets.Subnets.2.SubnetId)
      - $(kube.ec2.describe_subnets.Subnets.3.SubnetId)
    endpointPublicAccess: true
kube.eks_waiter.wait:
  name: ${EKS_CLUSTER_NAME}
kube.eks.create_nodegroup:
  clusterName: ${EKS_CLUSTER_NAME}
  nodegroupName: ${EKS_NODE_GROUP_NAME}
  nodeRole: $(kube.iam.get_role.Role.Arn)
  subnets:
    - $(kube.ec2.describe_subnets.Subnets.0.SubnetId)
    - $(kube.ec2.describe_subnets.Subnets.1.SubnetId)
    - $(kube.ec2.describe_subnets.Subnets.2.SubnetId)
    - $(kube.ec2.describe_subnets.Subnets.3.SubnetId)
kube.user.binaries:
kube.user.init:
  account_id: ${AWS_ACCOUNT_ID}
  region: ${AWS_REGION}
  cluster_name: ${EKS_CLUSTER_NAME}
kube.user.deploy.sage:
  deployment: ${APP_NAME}
  chart: ./kube
kube.user.deploy.oauth2:
  deployment: ${OAUTH2_PROXY_NAME}
  chart: oauth2-proxy/oauth2-proxy
  values:
    proxyVarsAsSecrets: false
    config.configFile: ""
    extraArgs:
      client-id: ${OAUTH2_PROXY_CLIENT_ID}
      cookie-secret: ${OAUTH2_PROXY_COOKIE_SECRET}
      client-secret: ${OAUTH2_PROXY_CLIENT_SECRET}
      skip-jwt-bearer-tokens: ${OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS}
      provider: ${OAUTH2_PROXY_PROVIDER}
      oidc-issuer-url: ${OAUTH2_PROXY_OIDC_ISSUER_URL}
      set-xauthrequest: ${OAUTH2_PROXY_SET_XAUTHREQUEST}
      upstream: ${OAUTH2_PROXY_UPSTREAM}
      email-domain: "${OAUTH2_PROXY_EMAIL_DOMAINS}"
      ssl-insecure-skip-verify: true
      ssl-upstream-insecure-skip-verify: true
kube.user.deploy.nginx:
  deployment: ${NGINX_NAME}
  chart: ingress-nginx/ingress-nginx

---
build:
  - docker

init:
  - docker
  - kube
