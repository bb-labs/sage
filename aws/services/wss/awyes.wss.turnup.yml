wss.image.build:
  tag: ${DOCKER_REGISTRY}/${WSS_NAME}:${WSS_IMAGE_TAG}
  path: wss
  dockerfile: Dockerfile
wss.image.push:
  repository: ${DOCKER_REGISTRY}/${WSS_NAME}
  tag: ${WSS_IMAGE_TAG}
  auth_config:
    username: ${DOCKER_HUB_USERNAME}
    password: ${DOCKER_HUB_PASSWORD}
---
wss.turnup.elb.create_target_group:
  Port: ${WSS_CONTAINER_PORT}
  Name: ${WSS_TARGET_GROUP_NAME}
  TargetType: ${WSS_TARGET_GROUP_TYPE}
  Protocol: ${WSS_TARGET_GROUP_PROTOCOL}
  ProtocolVersion: ${WSS_TARGET_GROUP_PROTOCOL_VERSION}
  VpcId: $(infra.ec2.describe_vpcs.Vpcs.0.VpcId)
wss.turnup.elb.create_listener:
  LoadBalancerArn: $(wss.turnup.elb.describe_load_balancers.LoadBalancers.0.LoadBalancerArn)
  Protocol: ${LOAD_BALANCER_PROTOCOL}
  Port: ${LOAD_BALANCER_PORT}
  Certificates:
    - CertificateArn: $(certs.turnup.acm.describe_certificate.Certificate.CertificateArn)
  DefaultActions:
    - Type: forward
      TargetGroupArn: $(wss.turnup.elb.create_target_group.TargetGroups.0.TargetGroupArn)
wss.turnup.ecs.register_task_definition:
  family: ${WSS_CONTAINER_TASK_DEFINITION_NAME}
  containerDefinitions:
    - name: ${WSS_NAME}
      image: ${DOCKER_REGISTRY}/${WSS_NAME}:${WSS_IMAGE_TAG}
      environmentFiles:
        - value: ${ENV_PATH}
          type: s3
      secrets:
        - name: DB_USERNAME
          valueFrom: arn:aws:ssm:${SAGE_REGION}:${SAGE_ACCOUNT_ID}:parameter/DB_USERNAME
        - name: DB_PASSWORD
          valueFrom: arn:aws:ssm:${SAGE_REGION}:${SAGE_ACCOUNT_ID}:parameter/DB_PASSWORD
        - name: APPLE_CLIENT_SECRET
          valueFrom: arn:aws:ssm:${SAGE_REGION}:${SAGE_ACCOUNT_ID}:parameter/APPLE_CLIENT_SECRET
      logConfiguration:
        logDriver: awslogs
        options:
          awslogs-group: ${WSS_NAME}-logs
          awslogs-region: ${SAGE_REGION}
          awslogs-stream-prefix: ${WSS_NAME}
          awslogs-create-group: "true"
      portMappings:
        - containerPort: ${WSS_CONTAINER_PORT}
          protocol: ${WSS_CONTAINER_PROTOCOL}
          appProtocol: ${WSS_CONTAINER_PROTOCOL_VERSION}
  executionRoleArn: $(role.turnup.iam.get_role)
  taskRoleArn: $(role.turnup.iam.get_role)
  networkMode: awsvpc
  requiresCompatibilities:
    - FARGATE
  cpu: "${WSS_CONTAINER_CPU}"
  memory: "${WSS_CONTAINER_MEMORY}"
wss.turnup.ecs.create_service:
  serviceName: ${WSS_NAME}
  cluster: $(cluster.ecs.create_cluster.cluster.clusterArn)
  taskDefinition: $(wss.turnup.ecs.register_task_definition.taskDefinition.taskDefinitionArn)
  desiredCount: ${WSS_CONTAINER_TASK_COUNT}
  loadBalancers:
    - targetGroupArn: $(wss.turnup.elb.create_target_group.TargetGroups.0.TargetGroupArn)
      containerName: ${WSS_NAME}
      containerPort: ${WSS_CONTAINER_PORT}
  launchType: FARGATE
  networkConfiguration:
    awsvpcConfiguration:
      subnets: $(infra.get_subnet_ids)
      securityGroups:
        - $(wss.ec2.describe_security_groups.SecurityGroups.0.GroupId)
      assignPublicIp: ENABLED
wss.turnup.ecs.update_service:
  service: ${WSS_NAME}
  cluster: $(cluster.ecs.create_cluster.cluster.clusterArn)
  taskDefinition: $(wss.turnup.ecs.register_task_definition.taskDefinition.taskDefinitionArn)
  forceNewDeployment: true
