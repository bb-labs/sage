// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Sage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Gender: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case man // = 0
  case woman // = 1
  case human // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .man
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .man
    case 1: self = .woman
    case 2: self = .human
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .man: return 0
    case .woman: return 1
    case .human: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Gender: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gender] = [
    .man,
    .woman,
    .human,
  ]
}

#endif  // swift(>=4.2)

enum LocationProximity: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case neighborhood // = 0
  case city // = 1
  case metro // = 2
  case state // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .neighborhood
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .neighborhood
    case 1: self = .city
    case 2: self = .metro
    case 3: self = .state
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .neighborhood: return 0
    case .city: return 1
    case .metro: return 2
    case .state: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension LocationProximity: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [LocationProximity] = [
    .neighborhood,
    .city,
    .metro,
    .state,
  ]
}

#endif  // swift(>=4.2)

enum MeetingTime: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case morning // = 0
  case earlyAfternoon // = 1
  case lateAfternoon // = 2
  case evening // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .morning
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .morning
    case 1: self = .earlyAfternoon
    case 2: self = .lateAfternoon
    case 3: self = .evening
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .morning: return 0
    case .earlyAfternoon: return 1
    case .lateAfternoon: return 2
    case .evening: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MeetingTime: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [MeetingTime] = [
    .morning,
    .earlyAfternoon,
    .lateAfternoon,
    .evening,
  ]
}

#endif  // swift(>=4.2)

enum WebRTCRequestType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case ice // = 0
  case sdp // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .ice
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ice
    case 1: self = .sdp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ice: return 0
    case .sdp: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension WebRTCRequestType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [WebRTCRequestType] = [
    .ice,
    .sdp,
  ]
}

#endif  // swift(>=4.2)

struct Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accessToken: String = String()

  var refreshToken: String = String()

  var authCode: String = String()

  var identityToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var location: Location {
    get {return _location ?? Location()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {self._location = nil}

  var email: String = String()

  var name: String = String()

  var rating: Double = 0

  var birthday: Int32 = 0

  var isOnline: Bool = false

  var gender: Gender = .man

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _location: Location? = nil
}

struct Location {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String = String()

  var latitude: Int32 = 0

  var longitude: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Match {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var otherUser: User {
    get {return _storage._otherUser ?? User()}
    set {_uniqueStorage()._otherUser = newValue}
  }
  /// Returns true if `otherUser` has been explicitly set.
  var hasOtherUser: Bool {return _storage._otherUser != nil}
  /// Clears the value of `otherUser`. Subsequent reads from it will return its default value.
  mutating func clearOtherUser() {_uniqueStorage()._otherUser = nil}

  var location: Location {
    get {return _storage._location ?? Location()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  var createdAt: Int32 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Criteria {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ageMin: Int32 = 0

  var ageMax: Int32 = 0

  var proximity: LocationProximity = .neighborhood

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PresignedUrlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: String = String()

  var fileName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PresignedUrlResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var url: String = String()

  var request: PresignedUrlRequest {
    get {return _request ?? PresignedUrlRequest()}
    set {_request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return self._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {self._request = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _request: PresignedUrlRequest? = nil
}

struct WebRTCSignalingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: WebRTCRequestType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var sdp: String {
    get {return _storage._sdp}
    set {_uniqueStorage()._sdp = newValue}
  }

  var sdpType: Int32 {
    get {return _storage._sdpType}
    set {_uniqueStorage()._sdpType = newValue}
  }

  var sdpDescription: String {
    get {return _storage._sdpDescription}
    set {_uniqueStorage()._sdpDescription = newValue}
  }

  var iceStreamID: String {
    get {return _storage._iceStreamID}
    set {_uniqueStorage()._iceStreamID = newValue}
  }

  var iceLineIndex: Int32 {
    get {return _storage._iceLineIndex}
    set {_uniqueStorage()._iceLineIndex = newValue}
  }

  var iceServerURL: String {
    get {return _storage._iceServerURL}
    set {_uniqueStorage()._iceServerURL = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Gender: @unchecked Sendable {}
extension LocationProximity: @unchecked Sendable {}
extension MeetingTime: @unchecked Sendable {}
extension WebRTCRequestType: @unchecked Sendable {}
extension Token: @unchecked Sendable {}
extension User: @unchecked Sendable {}
extension Location: @unchecked Sendable {}
extension Match: @unchecked Sendable {}
extension Criteria: @unchecked Sendable {}
extension PresignedUrlRequest: @unchecked Sendable {}
extension PresignedUrlResponse: @unchecked Sendable {}
extension WebRTCSignalingRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Gender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAN"),
    1: .same(proto: "WOMAN"),
    2: .same(proto: "HUMAN"),
  ]
}

extension LocationProximity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NEIGHBORHOOD"),
    1: .same(proto: "CITY"),
    2: .same(proto: "METRO"),
    3: .same(proto: "STATE"),
  ]
}

extension MeetingTime: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MORNING"),
    1: .same(proto: "EARLY_AFTERNOON"),
    2: .same(proto: "LATE_AFTERNOON"),
    3: .same(proto: "EVENING"),
  ]
}

extension WebRTCRequestType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ICE"),
    1: .same(proto: "SDP"),
  ]
}

extension Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "access_token"),
    2: .standard(proto: "refresh_token"),
    3: .standard(proto: "auth_code"),
    4: .standard(proto: "identity_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accessToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refreshToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.authCode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.identityToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accessToken.isEmpty {
      try visitor.visitSingularStringField(value: self.accessToken, fieldNumber: 1)
    }
    if !self.refreshToken.isEmpty {
      try visitor.visitSingularStringField(value: self.refreshToken, fieldNumber: 2)
    }
    if !self.authCode.isEmpty {
      try visitor.visitSingularStringField(value: self.authCode, fieldNumber: 3)
    }
    if !self.identityToken.isEmpty {
      try visitor.visitSingularStringField(value: self.identityToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Token, rhs: Token) -> Bool {
    if lhs.accessToken != rhs.accessToken {return false}
    if lhs.refreshToken != rhs.refreshToken {return false}
    if lhs.authCode != rhs.authCode {return false}
    if lhs.identityToken != rhs.identityToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "location"),
    3: .same(proto: "email"),
    5: .same(proto: "name"),
    6: .same(proto: "rating"),
    7: .same(proto: "birthday"),
    8: .standard(proto: "is_online"),
    9: .same(proto: "gender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.rating) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.birthday) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isOnline) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.gender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if self.rating != 0 {
      try visitor.visitSingularDoubleField(value: self.rating, fieldNumber: 6)
    }
    if self.birthday != 0 {
      try visitor.visitSingularInt32Field(value: self.birthday, fieldNumber: 7)
    }
    if self.isOnline != false {
      try visitor.visitSingularBoolField(value: self.isOnline, fieldNumber: 8)
    }
    if self.gender != .man {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User, rhs: User) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._location != rhs._location {return false}
    if lhs.email != rhs.email {return false}
    if lhs.name != rhs.name {return false}
    if lhs.rating != rhs.rating {return false}
    if lhs.birthday != rhs.birthday {return false}
    if lhs.isOnline != rhs.isOnline {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Location"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.latitude) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularInt32Field(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularInt32Field(value: self.longitude, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Location, rhs: Location) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Match: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Match"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .standard(proto: "other_user"),
    3: .same(proto: "location"),
    4: .standard(proto: "created_at"),
  ]

  fileprivate class _StorageClass {
    var _user: User? = nil
    var _otherUser: User? = nil
    var _location: Location? = nil
    var _createdAt: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _otherUser = source._otherUser
      _location = source._location
      _createdAt = source._createdAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._otherUser) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._location) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._createdAt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._otherUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._createdAt, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Match, rhs: Match) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._user != rhs_storage._user {return false}
        if _storage._otherUser != rhs_storage._otherUser {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Criteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Criteria"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "age_min"),
    2: .standard(proto: "age_max"),
    3: .same(proto: "proximity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ageMin) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.ageMax) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.proximity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ageMin != 0 {
      try visitor.visitSingularInt32Field(value: self.ageMin, fieldNumber: 1)
    }
    if self.ageMax != 0 {
      try visitor.visitSingularInt32Field(value: self.ageMax, fieldNumber: 2)
    }
    if self.proximity != .neighborhood {
      try visitor.visitSingularEnumField(value: self.proximity, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Criteria, rhs: Criteria) -> Bool {
    if lhs.ageMin != rhs.ageMin {return false}
    if lhs.ageMax != rhs.ageMax {return false}
    if lhs.proximity != rhs.proximity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PresignedUrlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PresignedUrlRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "file_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.action) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fileName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 1)
    }
    if !self.fileName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PresignedUrlRequest, rhs: PresignedUrlRequest) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.fileName != rhs.fileName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PresignedUrlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PresignedUrlResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._request) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try { if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PresignedUrlResponse, rhs: PresignedUrlResponse) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs._request != rhs._request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WebRTCSignalingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WebRTCSignalingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .same(proto: "type"),
    8: .same(proto: "user"),
    1: .same(proto: "sdp"),
    2: .standard(proto: "sdp_type"),
    3: .standard(proto: "sdp_description"),
    4: .standard(proto: "ice_stream_id"),
    5: .standard(proto: "ice_line_index"),
    6: .standard(proto: "ice_server_url"),
  ]

  fileprivate class _StorageClass {
    var _type: WebRTCRequestType = .ice
    var _user: User? = nil
    var _sdp: String = String()
    var _sdpType: Int32 = 0
    var _sdpDescription: String = String()
    var _iceStreamID: String = String()
    var _iceLineIndex: Int32 = 0
    var _iceServerURL: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _user = source._user
      _sdp = source._sdp
      _sdpType = source._sdpType
      _sdpDescription = source._sdpDescription
      _iceStreamID = source._iceStreamID
      _iceLineIndex = source._iceLineIndex
      _iceServerURL = source._iceServerURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._sdp) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._sdpType) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._sdpDescription) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._iceStreamID) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._iceLineIndex) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._iceServerURL) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._sdp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sdp, fieldNumber: 1)
      }
      if _storage._sdpType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sdpType, fieldNumber: 2)
      }
      if !_storage._sdpDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sdpDescription, fieldNumber: 3)
      }
      if !_storage._iceStreamID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iceStreamID, fieldNumber: 4)
      }
      if _storage._iceLineIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._iceLineIndex, fieldNumber: 5)
      }
      if !_storage._iceServerURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iceServerURL, fieldNumber: 6)
      }
      if _storage._type != .ice {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 7)
      }
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WebRTCSignalingRequest, rhs: WebRTCSignalingRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._sdp != rhs_storage._sdp {return false}
        if _storage._sdpType != rhs_storage._sdpType {return false}
        if _storage._sdpDescription != rhs_storage._sdpDescription {return false}
        if _storage._iceStreamID != rhs_storage._iceStreamID {return false}
        if _storage._iceLineIndex != rhs_storage._iceLineIndex {return false}
        if _storage._iceServerURL != rhs_storage._iceServerURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
