wss.image.build:
  tag: ${DOCKER_REGISTRY}/${WSS_NAME}:${WSS_IMAGE_TAG}
  path: wss
  dockerfile: Dockerfile
wss.image.push:
  repository: ${DOCKER_REGISTRY}/${WSS_NAME}
  tag: ${WSS_IMAGE_TAG}
  auth_config:
    username: ${DOCKER_HUB_USERNAME}
    password: ${DOCKER_HUB_PASSWORD}
---
wss.ecs.register_task_definition:
  family: ${WSS_CONTAINER_TASK_DEFINITION_NAME}
  containerDefinitions:
    - name: ${WSS_NAME}
      image: ${DOCKER_REGISTRY}/${WSS_NAME}:${WSS_IMAGE_TAG}
      environmentFiles:
        - value: ${ENV_FILE_PATH}
          type: s3
      secrets:
        - name: DB_USERNAME
          valueFrom: arn:aws:ssm:${SAGE_REGION}:${SAGE_ACCOUNT_ID}:parameter/DB_USERNAME
        - name: DB_PASSWORD
          valueFrom: arn:aws:ssm:${SAGE_REGION}:${SAGE_ACCOUNT_ID}:parameter/DB_PASSWORD
        - name: APPLE_CLIENT_SECRET
          valueFrom: arn:aws:ssm:${SAGE_REGION}:${SAGE_ACCOUNT_ID}:parameter/APPLE_CLIENT_SECRET
      logConfiguration:
        logDriver: awslogs
        options:
          awslogs-group: ${WSS_NAME}-logs
          awslogs-region: ${SAGE_REGION}
          awslogs-stream-prefix: ${WSS_NAME}
          awslogs-create-group: "true"
      portMappings:
        - containerPort: ${WSS_CONTAINER_PORT}
          protocol: ${WSS_CONTAINER_PROTOCOL}
          appProtocol: ${WSS_CONTAINER_PROTOCOL_VERSION}
  executionRoleArn: $(role.iam.get_role.Role.Arn)
  taskRoleArn: $(role.iam.get_role.Role.Arn)
  networkMode: awsvpc
  requiresCompatibilities:
    - FARGATE
  cpu: "${WSS_CONTAINER_CPU}"
  memory: "${WSS_CONTAINER_MEMORY}"
